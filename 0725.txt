관계형 데이터 베이스

-> 데이터를 테이블의 집합으로 표현

종류 - Oracle : 가장 안정적, 비용이 많이 듬, 공공기관과 대기업에서 주로 이용
       - MySQL (Maria DB) : Open Source로 출발
       - MSSQL Server : MS에서 만든 상용화된 DB
       - DB2 : IBM //금융에서 많이 사용
       - Tibero : T-Max
       - Access : MS에서 만든 상용 DB
       - SQLite : 스마트폰에 내장된 관계형 DB, Embedded에서 사용됨

테이블(relation)

            행 == Column(Attribute, Field)   // Cardinality: 행의 개수
             |
           번호 이름  나이 ㅡ열 ==Row(record, tuple) // Degree: 열의 개수
             1      a     12
             2      b     32
             4      h     42

*key
->row를 구분하기 위한 Column 또는 Column의 집합
1.Primary Key(기본키)
테이블 내에서 행을 구분하기 위해 선정한 키  //1개의 테이블에 한개만 존재 한다.
a. Foreign Key (외래 키, 참조 키)
다른 테이블에서 기본키인 컬럼

Integrity(무결성)
1. 개체 무결성
-> 기본키는 null이거나 중복될수 없다.
2. 참조 무결성
-> 외래키는 null이거나 참조 할수 있는 값만을 가져야한다.
 
\\192.168.0.100
    

SQL(Structured Query Language)
- 관계형 데이터베이스를 조작하기 위한 언어
- 비 절차적 언어 = 작성한 순서대로 실행 안됨
- 하나의 명령문은 ; 으로 종료

1.DQL(Database Query Language)
- 데이터 조회 : Select
- 데이터를 변경하지 않음

2.DML(Database Manipulation Language
- 데이터 조작
- 삽입: Insert
- 갱신: Update
- 삭제: Delete

3.TCL(Transaction Control Language)
- 트랜 잭션 제어 (트랜 잭션== 한번에 이루어져야 하는 작업단위)
- Commit : 작업 완료 -> 반영
- Rollback : 철회

4.DDL(Database Defintion Language)
- 데이터 베이스 구조를 생성, 변경, 삭제
- Create, Alter, Drop, Truncate, Rename (만들기, 변경, 지우기, 데이터만 삭제, 이름 바꾸기)

5.DCL(Data Control Language)
-권한
- Grant, Revoke (권한부여, 권한회수)

Oracle
-오라클 사에서 만든 관계형, 데이터 베이스

데이터 베이스 사용
1.Database Server가 필요
- 오라클 설치
- 사용할 데이터 베이스

2.Database Modeling Tool 사용
- 데이터베이스 설계를 하고 자동으로 테이블을 생성하도록 할 때 필요 
- ER-Win이 가장 유명합니다.

3.Database 접속도구 사용
- 데이터베이스에 SQL을 실행하기 위한 프로그램

Oracle 설치
- 설치 확인 // 콘솔창에서 sqlplus라고 입력 한뒤 아이디 system 비밀번호는 내꺼입력
              // 서비스에서 확인 OracleService, OracleTNSListener 설치 돼 있는지 확인

Oracle 접속도구
- 오라클을 설치하면 sqlplus라는 접속도구가 자동으로 설치가 됩니다.
- 관리자는 sqlplus를 많이 사용합니다.
- 오라클을 전문적으로 다룰 때는 sqlplus에서 작업을 하는것이 좋다.
- sqldeveloper : 오라클에서 무료로 제공하는 java로 만든 gui 접속 // 자바로 만든 프로그램에 jre가 설치가 되어있어야 실행이 가능
- toad: 개발 현업에서 많이 사용하는 데이터베이스 접속 도구

오라클을 설치하고 난 후 처음 제공되는 계정
sysdb: 슈퍼 관리자
system: 관리가 졔정
-데이터베이스에 문자가 생긴 경우 sysdba에서 작업 그 이외의 경우는 system에서 작업합니다.
- 오라클은 기본적으로 1521번 포트를 사용하도록 설치되고 8080번 포트도 사용합니다.
데이터베이스 이름을 SID라고 하는데 EXpress Edition은 기본으로 xe라는 이름으로 설치되고 enterprise edition을 설치하면 orcl로 설치됩니다.

1.실습용 계정 생성 -system으로 로그인해서 생성
-오라클에서 보통 scott이나 h계정으로 연습을 합니다
-scott을

GRANT CONNECT ,RESOURCE,UNLIMITED TABLESPACE TO SCOTT --SCOTT계정을 생성하고 접속 권한을 부여하는 명령
IDENTIFIED BY scoco;

ALTER USER SCOTT DEFAULT TABLESPACE USERS; --SCOTT에게 테이블 스페이스를 사용할 수 있도록 해주는 명령
ALTER USER SCOTT TEMPORARY TABLESPACE TEMP;--SCOTT에게 테이블 스페이스를 사용할 수 있도록 해주는 명령

2.scott 계정에 샘플 데이터베이스를 삽입
-scott.sql 파일의 내용을

drop ~ commit 까지복붙

실습을 할 때 관리자 계정을 사용하는 것은 위험합니다.
그래서 보통 계정을 생성하는데 오라클에서 제공하는 샘플 sql이 전부 scott이나 hr로 되어 있어서
계정을 scott이나 hr로 생성합니다.
scott이 테스트 해 볼 데이터는 scott.sql이라는 파일로 제공됩니다.
이 데이터를 삽입해서 사용합니다.

3)샘플 데이터 확인
select * from emp;

//최근의 데이터베이스 다운로드 받은 경우는 12개의 데이터가 나오고 예전 버전에서는 14개의 데이터가 조회됩니다.

테이블 구조 확인하기
desc 테이블 이름;

1.emp 테이블
empno 사원번ㄴ호로 숫자 4자리 primary key
ename 사원이름으로 문자 10자리
job 업무로 문자 9자리
mgr 관리자의 사원번호
hiredate 입사일로 날짜 형식
sal 급여로 숫자 7자리
comm 상여금으로 숫자 7ㅈ리
deptno 부서명으로 dept 테이블의 외래키이고 숫자 2자리

2.dept 테이블
deptno 부서번호로 숫자 2자리이고 primary key
dname 부서명으로 문자 14자리
loc 지역(위치)로 문자 13자리

3.salgrade 테이블 (호봉 테이블)
grade 등급
losal 최저급여
hisal 최대급여

select
데이터를 조회할 때 사용하는 구문으로 6개의 절로 구성됩니다.
-select 조회하고자 하는 컬럼이나 연산식 또는 *
-from 조회하고자 하는 테이블이름을 나열
-where 조회하고자 하는 조건을 기술
-group by 그룹화하고자 하는 컬럼이나 연산식
-having 그룹화(group by) 이후의 조건
-order by 정렬할 컬럼이나 연산식을 나열

select나 from은 필수
실행순서는 from - > where -> group by - > having -> select -> order by
예약어와 테이블 이름 그리고 테이블 이름은 대소문자 구별을 하지 않습니다.
예약어 다음에는 반드시 한 칸 이상의 공백이 있어야 합니다.

1. 테이블의 전체 데이터를 조회 할 떄는 
				select *
				from 테이블이름;

ex) emp 테이블의 전체 데이터를 조회해라
				select *
				from emp;

2. 특정 컬럼에 해당하는 데이터만 조회
select 컬럼이름을 나열
from 테이블이름
ex) emp 테이블에서 ename과 job을 조회
				select  ename, job
				form emp;

3컬럼의 연산식(+,-,*,/)을 조회할 수 있습니다.
데이터베이스에서는 날짜도 산술 연산을 할 수 있습니다.
하루를 1로 설정해서 연산을 합니다.
ex) emp 테이블에서 ename과 sal * 12 한 결과를 조회
					select ename, (sal*12)					
					from emp;

ex) emp 테이블에서 ename과 입사한 지 몇일이 지났는지 조회
입사일은 hiredate 컬럼이고 현재 시간및 날짜는 sysdate
					select ename, (sysdate - hiredate )
					from emp;

4.컬럼에 별명을 설정해서 출력할 수 잇습니다.
별명은 한 칸 공백을 주고 설정해주면 됩니다.
대문자나 공백이 있으면 별명을 ""로 감싸야 합니다.

ex) emp 테이블에서 ename과 sal*12를 조회
단 sal*12는 연봉이라고 출력
			select ename, (sal*12) "year sal"
			from emp; 

연산식이나 함수의 결과를 조회할 때는 별명을 사용하는 것이 좋습니다.

5.데이터베이스 에서의 NULL
데이터베이스는 모든 자료형에 대해서 NULL값을 대입할 수 있습니다.
데이터베이스에서는 NULL을 실제로 저장하는 것이 아니고 NULL을 판단할 수 있는 별도의 바이트를 할당해서 NULL 여부를 저장
NULL과 산술연산을 수행하면 NULL이 됩니다.

emp 테이블의 comm이라는 컬럼은 NULL을 포함하고 있습니다.       
						select ename, comm
						from emp;
ex) emp 테이블에서 ename과 sal*12 + comm의 결과를 조회
						select ename, sal*12+comm
					 	from emp;
COMM이 NULL인 컬럼의 값이 NULL로 출력됩니다.

NVL 함수
컬럼이나 연산식의 결과가 NULL일 때 이를 다른 값으로 치환하기 위한 함수
NVL(컬럼이름 또는 연산식, 치환할 값)의 형식으로 사용합니다.

ex) emp테이블에서 ename과 sal*12+comm의 결과를 조회
comm컬럼의 값이 NULL일 때는 0으로 해서 계싼하라 

6.결합 연산자  '||'
문자열을 겹합할 떄 사용하는 연산자
컬럼들을 하나로 합쳐서 출력하고자 할 때 사용하는 연산자
날짜 같은 데이터를 저장할 때 Date를 이용하지 않고 년 월 일을 각각의 컬럼으로 저장한 후 출력할 때 하나로 합치기 위한 목적이다.

ex) emp 테이블에서 ename과 job을 하나로 묶어서 조회

7.Literal
사용자가 직접 입력하는 데이터
프로그램의 상수 역역에 별도로 저장해서 다음에 사용할 때 저장된 데이터를 이용합니다.
리터럴은 한 번 메모리를 할당받으면 프로그램이 종료되 때 까지 소멸되지 않습니다.
리터럴은 사용할 때 상수 영역을 확인해서 상수 영역에 존재하면 그 데이터를 이용하고 좆ㄴ재하지 않으면 새로 저장해서 사용합니다.
오라클에서는 문자 리터럴은 작은 따옴표 안에 기재합니다 '문자 or 문자열'

8.distinct
select절의 맨 앞에 기재할 수 있는 예약어
컬럼의 중복을 제거하고 조회할 때 사용합니다.
컬럼이름이 하난 일 때는 컬럼 1개의 중복을 제거하지만 컬럼을 여러 개 나옇하면 나열 된 모든 컬럼의 값이 동이한 경우에만 중복을 제거

ex)emp 테이블에서 job의 중복을 제거하고 조회
distinct는 select절에 맨앞에 1번만 올수 있습니다.
select ename, distinct job // 불가
select distinct ename, job // ename, job 모두 각각 같은 값일 때만 제거 됨

9.where절
테이블에 조건을 적용해서 조건에 맞는 행 만 필터링 하기 위한 절
select가 테이블의 데이터를 열 단위로 필터링 하는데 where 는 행단위로 필터링 합니다.
from 다음으로 수행됩니다.

1)단일 행 연산자
>, <, >=, <=
=, !=(<>)
앞에 not을 붙이면 결과는 반대가 됩니다.
날짜도 숫자로 간주하기 떄문에 크기비교 연산자 사용할 수 있다.
문자열도 크기비교 연산자를 사용할 수 있다. // 코드 값을 갖고 비교합니다.

ex1) emp 테이블에서 sal이 3000이상인 사원의 empno enmae, job ,sal을 조회
select empno, ename, job, sal
from emp
where sal >= 3000;

ex emp에서 job 이 MANAGER 인사람 조회
select empno, ename, job, sal
from emp
where job >= 'MANAGER';

2)날짜 데이터 사용
날짜 = to_date('2008/05/14 22:23:21' 'hh24 : miss'

3) and는 모두 true 일 때 만 true
    or는 모두 false 일 때 만 false
    and는 첫번째 결과가 false이면 결과가 무조건 false이기 때문에 뒤의 조건은 조사하지 않습니다.

    or는 첫번째 결과가 true이면 결과가 무조건 true이기 때문에 뒤의 조건은 조사하지 않습니다.

4) in, not in
in은 여러개의 값중에서 하나라도 일치하는게 있으면 조회
not in은 여러개의 값 중에서 일치하는게 없으면 조회한다.

5)between A and B
A보다 크거나 같고 B보다 작거나 같은 데이터 조회
반드시 B의 값이 A보다 크거나 같아야 합니다.

6)is null, is not null
null인 데이터를 조회할 때는 is null
null이 아닌 데이터를 조회할 때는 is not null

emp테이블에서 sal이 1000 이상이고 job이 CLERK인 사원의 ename과 job, sal을 조회

select ename, job, sal
from emp
where sal >=1000 and job = 'CLERK';

emp 테이블에서 job 이 cLERK이거나 MANAGER인 사원이 ename, job

select ename, job
from emp
where job = 'CLERK' or 'MANAGER';
where job = 'CLERK' in 'MANAGER';

emp ㅌ ㅔ이블에서 comm의 값이 null이 아닌 데이터의 ename과 sal을 조회

7)부분일치 검색 - like와 와일드카드 문자 이용
_: 반드시 하나의 문자와 매핑
%: 0개 이상의 문자

emp 테이블에서 ename에 L이 포함된 사원의 ename과 job을 조회

where ename like '%L%';
where ename like '_L___'; 2번째 글자가 L인 사원

emp 테이블에서 hiredate가 81년인 데이터의 모든 컬럼을 조회

select *
from emp
where hiredate like '81%';

10. order by 절
데이터를 순서대로 나열 하기 위한 절
Select 구문에서 가장 마지막에 작성하고 가장 마지막에 수행됩니다.
ascending(오름차순) 작은것에서 큰것 순서대로 나열하는 것, 기본은 오름차순이다.
descending(내림차순) 큰 것에서 부터 작은 것 순으로 나열하는 것
order by 정렬할 컬럼이름이나 연산식 asc | desc
asc는 생략해도 되는데 오름차순이고 desc는 내림차순
여러 개의 컬럼이나 여러 개의 연산식을 나열해도 되는데 앞의 조건부터 순서대로 적용하게 됩니다.
첫번째 컬럼을 가지고 정렬을 하고 동일한 값이 있을때 두번째 컬럼을 가지고 수행합니다.
데이터 베이스에 데이터가 저장될때는 순서와 상관없이 저장됩니다.
2개 이상의 데이터를 조회할 때는 정렬하는 것이 좋습니다.

ex emp테이블의 모든 컬럼을 조회하는데 ename의 알파벳 순으로 조회
select *
from emp
order by ename;

ex emp테이블의 모든 컬럼을 조회하는데 job의 오름차순으로 정렬하고 job이 동일한 경우에는 sal이 많은 데이터부터 조회
select *
from emp
order by job, sal desc;

select empno, ename, job, sal
from emp
where sal >=3000;

select ename deptno 
from emp 
where empno = 7788;

select ename, job, hiredate 
from emp 
where hiredate between '810220' and '810501' 
order by hiredate desc;

select *
from emp
where deptno 10 || 20
order by ename;

select
from emp
where comm is not null;select ename, job
from emp;

select ename, (sal*12) "year sal"
from emp;

select ename, (sysdate - hiredate )
from emp;

select ename, comm
from emp;

select ename, sal*12+comm
from emp;

select ename, sal*12+NVL(comm,0) 지급액
from emp;

select ename || job
from emp;

select ename || '의 직무는 ' || job || ' 연봉은 ' || (sal*12) 
from emp;

select distinct job
from emp;

select empno, ename, job, sal
from emp
where sal >= 3000;

select empno, ename, job, sal
from emp
where job >= 'MANAGER';

select empno, ename, job, sal, hiredate
from emp
where hiredate >= to_date('1982/01/01', 'yyyy/mm/dd');


select ename, job, sal
from emp
where  job = 'CLERK' and sal >= 1000;



select ename, job
from emp
--where job = 'CLERK' or job = 'MANAGER';
where job in ('CLERK',  'MANAGER');

select ename, sal
from emp
where comm is not null;

select ename, job
from emp
where ename like '%L%';

select *
from emp
where hiredate like '81%';

select *
from emp
order by deptno desc, sal desc;

select *
from emp
order by job, sal desc;

select ename, job, hiredate 
from emp 
where hiredate between '810220' and '810501' 
order by hiredate desc;

select *
from emp
where deptno = 10 or deptno = 20
order by ename;

select ename employee, sal "Monthly Salary"
from emp
where sal >= 1500 and deptno = 10 or deptno = 30;

select *
from emp
where hiredate like '82%';


select *
from emp
where comm is not null;

select ename, sal, comm
from emp
where comm >= sal/10;

select *
from emp
where job not in('CLERK', 'ANAYST')  and sal not in ('5000', '1000', '3000');

 








